##
# Project environment variables.
#
# It is used by Ahoy and other scripts to read default values.
#
# It is also a single place to define variables that control how the DrevOps
# works without the need to modify scripts.
#
# There is no need to modify any values unless it is required to alter how
# the project works.
#
# The values must be scalar (cannot be another variable). Do not enclose values
# in double quotes unless they contain spaces.
#
# To apply any changes made to this file (except for PHPCS and LINT targets),
# run `ahoy up cli`.
#
# Variable values override order (bottom values win):
# - default value in container
# - default value in docker-compose.yml
# - value in .env (last value wins)
# - value from environment

################################################################################
#                                  GENERAL                                     #
################################################################################

# Project name.
PROJECT=your_site

# Docker Compose project name. All containers will have this name.
COMPOSE_PROJECT_NAME=your_site

# Drupal version.
DRUPAL_VERSION=9

# Local development URL.
# Make sure that there is no trailing slash in the value.
LOCALDEV_URL=your-site.docker.amazee.io

# Path to the root of the project inside of the container.
APP=/app

# Path to the site installation relative to the current directory.
WEBROOT=docroot

# Database connection details.
# Note that these are not used in production.
MYSQL_HOST=mariadb
MYSQL_USER=drupal
MYSQL_PASSWORD=drupal
MYSQL_PORT=3306

# Drupal site name.
DRUPAL_SITE_NAME="YOURSITE"

# Drupal profile name.
DRUPAL_PROFILE=your_site_profile

# Drupal module prefix for site-specific custom modules.
DRUPAL_MODULE_PREFIX=your_site

# Drupal theme name.
DRUPAL_THEME=your_site_theme

# Set to 1 to put site into a maintenance mode during deployment.
DRUPAL_BUILD_WITH_MAINTENANCE_MODE=1

# Flag to unblock admin account during deployment. Note that production
# environments should have this set to 0.
DRUPAL_UNBLOCK_ADMIN=1
################################################################################
#                                   TOOLS                                      #
################################################################################

# Validate composer lock file.
COMPOSER_VALIDATE_LOCK=1

# Comma-separated list of PHPCS targets (no spaces).
PHPCS_TARGETS=docroot/profiles/custom/your_site_profile,docroot/modules/custom,docroot/themes/custom,docroot/sites/default/settings.php,tests

# PHP Parallel Lint extensions as a comma-separated list of extensions with
# no preceding dot or space.
PHP_LINT_EXTENSIONS=php,inc,module,theme,install

# PHP Parallel Lint targets as a comma-separated list of extensions with no
# preceding dot or space.
PHP_LINT_TARGETS=docroot/profiles/custom/your_site_profile,docroot/modules/custom,docroot/themes/custom,docroot/sites/default/settings.php,tests

# Flag to allow BE code linting failures.
ALLOW_BE_LINT_FAIL=0

# Flag to allow FE code linting failures.
ALLOW_FE_LINT_FAIL=0

# Flag to allow Unit tests to fail.
ALLOW_UNIT_TESTS_FAIL=0

# Flag to allow Kernel tests to fail.
ALLOW_KERNEL_TESTS_FAIL=0

# Flag to allow Functional tests to fail.
ALLOW_FUNCTIONAL_TESTS_FAIL=0

# Flag to allow BDD tests to fail.
ALLOW_BDD_TESTS_FAIL=0

################################################################################
#                                   WORKFLOW                                   #
################################################################################

# Database-in-Docker-image database storage.
#
# Allows to store database in Docker image for local development and in CI.
# This allows to avoid waiting for long database imports for large databases
# when bulding sites.
#
# Note that the source database coming from the production environment can still
# be imported as a dump file if DATABASE_DOWNLOAD_SOURCE!=docker_registry or
# can be using previsous version of the image
# if DATABASE_DOWNLOAD_SOURCE=docker_registry.
#
# Database image name in format <org>/<image_name>:<label>.
#
# Use drevops/drevops-mariadb-drupal-data as a starting Docker image for your
# Database-in-Docker-image database.
# @see https://github.com/drevops/mariadb-drupal-data
#
# IMPORATANT! Providing a value for this variable switches the database storage
# mechanism and other underlying operations to use database-in-Docker-image
# for development and CI, so be cautios when making this change (i.e. the
# workflow is controlled from a single variable, which means that
# "with great power comes great responsibility").
DATABASE_IMAGE=
# Docker registry.
DOCKER_REGISTRY=docker.io
# Docker registry credentials to read and write Docker images.
# Note that for CI, these variables should be set through UI.
DOCKER_REGISTRY_USERNAME=
DOCKER_REGISTRY_TOKEN=

# Directory with database dump data (file or Docker image archive).
DB_DIR=./.data

# Database dump file name.
# Note that Docker image archive will use the same file name, but with '.tar'
# extension.
DB_FILE=db.sql

# Where the database is downloaded from:
# - "url" - directly from URL as a file using CURL.
# - "ftp" - directly from FTP as a file using CURL.
# - "acquia" - from latest Acquia backup via Cloud API as a file.
# - "lagoon" - from Laggon master enveronment as a file.
# - "docker_registry" - from the docker registry as a docker image.
# - "none" - not downloaded, site is freshly installed for every build.
#
# Note that "docker_registry" works only for database-in-Docker-image
# database storage (when DATABASE_IMAGE variable has a value).
DATABASE_DOWNLOAD_SOURCE=curl

#;< !DATABASE_DOWNLOAD_SOURCE_DOCKER_REGISTRY
# Database dump file source: CURL.
# Provide a URL to the DB dump file with optional HTTP Basic Authentication
# creadentials embedded into URL value.
CURL_DB_URL=
#;> !DATABASE_DOWNLOAD_SOURCE_DOCKER_REGISTRY

#;< FTP
# Database dump file source: FTP.
# Note that for CI, these variables should be set through UI.
FTP_HOST=
FTP_PORT=21
FTP_USER=
FTP_PASS=
FTP_FILE=db.sql
#;> FTP

#;< ACQUIA
# Database dump file source: Acquia.
# @see https://docs.acquia.com/acquia-cloud/develop/api/auth/#cloud-generate-api-token
# @see https://cloudapi-docs.acquia.com/#/Environments/getEnvironmentsDatabaseDownloadBackup
AC_API_APP_NAME=
AC_API_DB_ENV=prod
AC_API_DB_NAME=your_site
# Authenticate with Acquia Cloud API credentials.
#  1. Create your Acquia Cloud API token:
#     Acquia Cloud UI -> Account -> API tokens -> Create Token
#  2. Populate `$AC_API_KEY` and `$AC_API_SECRET` environment variables in
#     `.env.local` file with values generated in the step above.
#;> ACQUIA

#;< LAGOON
# Set this to 1 once Lagoon integration is complete.
# This will provide access to Lagoon environments from the CLI container.
LAGOON_INTEGRATION_COMPLETE=0
# Lagoon project name. May be different from $PROJECT.
LAGOON_PROJECT=your_site
# Dedicated branch to identify production environment.
# Set to empty value if only LAGOON_ENVIRONMENT_TYPE should control this.
# See settings.php for more details.
LAGOON_PRODUCTION_BRANCH=production

# Lagoon environment to download DB from.
LAGOON_DB_ENVIRONMENT=master
#;> LAGOON

# Set to 1 to force fresh install even if the site exists.
# Useful for profile-based deployments into existing environments.
FORCE_FRESH_INSTALL=0

# Set to 1 in order to enable DB exporting before importing.
# Useful to backup DB during development.
DB_EXPORT_BEFORE_IMPORT=0

#;< DEPLOYMENT
# The type of deployemt.
# Combination of comma-separated values to support multiple deployments: "code",
# "docker", "webhook", "lagoon".
DEPLOY_TYPE=
# Flag to proceed with deployment. Set to "1" once the deployment configuration
# is configured in CI and is ready.
# @see scripts/drevops/deploy-<type>.sh for more variables.
DEPLOY_PROCEED=
#;> DEPLOYMENT

################################################################################
#                                MAINTENANCE                                   #
################################################################################

# Set to 1 to print debug information in DrevOps scrips.
DREVOPS_DEBUG=

# Starting containers will suppress STDOUT output, but will still show any
# STDERR output. Set this to 1 to allow STDOUT output.
BUILD_VERBOSE=

# Allows to pin DrevOps to a specific commit when updating with `ahoy update`.
# If this is not set, the latest release of DrevOps for specified DRUPAL_VERSION
# will be used.
DREVOPS_COMMIT=9.x-0.1.0

#;< DEMO
#-------------------------------------------------------------------------------
# Variables used to override project-specific values for demonstration purposes.
#
# This is to allow to demonstrate how DrevOps works without asking users
# to perform any additional steps when trying out DrevOps for the first time.
#
# Remove this from your project when database download integration setup is
# finished.
#-------------------------------------------------------------------------------

#;< !DATABASE_DOWNLOAD_SOURCE_DOCKER_REGISTRY
# Location of the demo database used for demonstration with CURL database
# dump as a type of file source.
CURL_DB_URL=https://raw.githubusercontent.com/wiki/drevops/drevops/db_d8.dist.sql.md
#;> !DATABASE_DOWNLOAD_SOURCE_DOCKER_REGISTRY

#;< DATABASE_IMAGE
# The name of the demo database image used for demonstration only for
# database-in-Docker-image data storage.
#; The line below will be automatically uncommented for database-in-Docker-image
#; storage. It is commented out to allow running non-database-in-Docker-image
# workflow by default.
##### DATABASE_IMAGE=drevops/drevops-mariadb-drupal-data-demo-8.x
#;> DATABASE_IMAGE
#;> DEMO

# Development settings
DREVOPS_COMMIT=HEAD

DOCTOR_CHECK_MINIMAL=1
